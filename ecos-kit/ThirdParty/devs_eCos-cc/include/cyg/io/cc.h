/**
    Header file for CC (Core Communicator) module.

    This file is the header file that define the API and data type
    for CC module.

    @file       CC.h
    @ingroup    mIDrvSys_CC
    @note       Nothing.

    Copyright   Novatek Microelectronics Corp. 2011.  All rights reserved.
*/

#ifndef _CC_H
#define _CC_H

//#include "Type.h"
//#include "RCWMacro.h"

typedef unsigned long       CC_U32;     ///< Unsigned 32 bits data type

typedef enum
{
    CC_EVT_FROM_CPU1 = 0x0,
    CC_EVT_FROM_CPU2,
    CC_EVT_FROM_DSP,

    CC_ACK_FROM_CPU1,
    CC_ACK_FROM_CPU2,
    CC_ACK_FROM_DSP,

    //ENUM_DUMMY4WORD(CC_EVENT)

}CC_EVENT;

typedef enum _CC_ER{
    CC_ER_OK                      =  0x00000000, ///< no error
    CC_ER_PARM                    =  -1,         ///< parameter error
    CC_ER_TMOUT                   =  -2,         ///< cc timeout
}CC_ER;
/**
    @addtogroup mIDrvSys_CC
*/
//@{

// Core Communicator handler
typedef void (*CC_HANDLER)(CC_U32 uiEvent);

typedef struct
{
    CC_U32      uiCMDID;        ///< Command ID, a serial number from 1 to 0xFFFF
                                ///< @note      For cc_getCoreXCMD() only, generated by CC driver.
    CC_U32      uiCMDOperation; ///< Command operation, from 0 to 0xFFFF
    CC_U32     *pData;          ///< Command data
                                ///< @note      Not the address of data that will be processed by this command
    CC_U32      uiDataSize;     ///< Command data size in bytes
                                ///< @note      Not the size of data that will be processed by this command
} CC_CMD, *PCC_CMD;


typedef enum
{
    CC_CORE_MIPS1 = 0x0,    ///< 1st Core MIPS1
    CC_CORE_MIPS2,          ///< 2nd Core MIPS2
    CC_CORE_DSP,            ///< 3rd Core DSP

    CC_CORE_NUM,

}CC_CORE_ID;


#define CC_RES_ID_MAX      32

typedef enum
{
    CC_RES_ID_0 = 0x0,
    CC_RES_ID_1,
    CC_RES_ID_2,
    CC_RES_ID_3,
	CC_RES_ID_4,

    // Insert member before this line
    // Don't change the order of following three members
    CC_RES_ID_NUM,

}CC_RES_ID;


#define CC_RESOURCE_IPC     CC_RES_ID_0     //< IPC resource between multi-cpu
#define CC_RESOURCE_RTC     CC_RES_ID_1     //< RTC resource between multi-cpu
#define CC_RESOURCE_CKG     CC_RES_ID_2     //< CKG resource between multi-cpu
#define CC_RESOURCE_TOP     CC_RES_ID_3     //< TOP resource between multi-cpu
#define CC_RESOURCE_GPIO    CC_RES_ID_4     //< TOP resource between multi-cpu

extern CC_ER    cc_open(void);

extern CC_ER    cc_close(void);

extern void     cc_registerCore1Handler(CC_HANDLER Hdl);

extern void     cc_registerCore3Handler(CC_HANDLER Hdl);

extern CC_ER    cc_sendCore1CMD(PCC_CMD pCMD);

extern CC_ER    cc_sendCore3CMD(PCC_CMD pCMD);

extern void     cc_getCore1CMD(PCC_CMD pCMD);

extern void     cc_getCore3CMD(PCC_CMD pCMD);

extern void     cc_ackCore1CMD(void);

extern void     cc_ackCore3CMD(void);

extern CC_ER    cc_hwLockResource(CC_CORE_ID uiCoreID, CC_RES_ID uiResource);

extern CC_ER    cc_hwUnlockResource(CC_CORE_ID uiCoreID, CC_RES_ID uiResource);

extern INT32    cc_getHwResGrant(CC_CORE_ID uiCoreID);

//@}

#endif
